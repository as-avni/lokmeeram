"use client";

import { useState } from "react";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Button } from "@/components/ui/button";
import Image from "next/image";

export default function RegForm() {
  const [formData, setFormData] = useState({
    name: "",
    dob: "",
    phone: "",
    email: "",
    address: "",
    message: "",
  });

  const [step, setStep] = useState(1);
  const [screenshot, setScreenshot] = useState<File | null>(null);
  const [loading, setLoading] = useState(false);
  const [success, setSuccess] = useState("");
  const [error, setError] = useState("");
  const [fileName, setFileName] = useState("");

  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    setFormData({ ...formData, [e.target.name]: e.target.value });
  };

  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.files && e.target.files.length > 0) {
      setScreenshot(e.target.files[0]);
      setFileName(e.target.files[0].name);
    }
  };

  const handleNext = () => {
    setStep(2);
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setLoading(true);
    setSuccess("");
    setError("");

    if (!screenshot) {
      setError("Please upload the payment screenshot before submitting.");
      setLoading(false);
      return;
    }

    try {
      const formDataToSend = new FormData();
      Object.entries(formData).forEach(([key, value]) => {
        formDataToSend.append(key, value);
      });
      formDataToSend.append("screenshot", screenshot);

      console.log("üì§ Submitting form data...");

      const response = await fetch("https://lok-me-ram-backend.vercel.app/api/submit-form", {
        method: "POST",
        body: formDataToSend,
      });

      const result = await response.json();

      if (result.success) {
        setSuccess("‡§´‡•â‡§∞‡•ç‡§Æ ‡§∏‡§´‡§≤‡§§‡§æ‡§™‡•Ç‡§∞‡•ç‡§µ‡§ï ‡§∏‡§¨‡§Æ‡§ø‡§ü ‡§π‡•ã ‡§ó‡§Ø‡§æ!");
        setFormData({ name: "", dob: "", phone: "", email: "", address: "", message: "" });
        setScreenshot(null);
        setFileName("");
        setStep(1);
      } else {
        throw new Error(result.message || "Submission failed");
      }
    } catch (error) {
      console.error("‚ùå‡§´‡•â‡§∞‡•ç‡§Æ ‡§∏‡§¨‡§Æ‡§ø‡§ü ‡§ï‡§∞‡§®‡•á ‡§Æ‡•á‡§Ç ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø ‡§π‡•Å‡§à:", error);
      setError("Failed to submit the form. Please try again.");
    } finally {
      setLoading(false);
    }
  };

  return (

<section id="reg-form" className="mx-auto px-4 py-10 flex justify-center items-center">
  <div className="w-full">
    <h2 className="text-3xl text-center md:text-5xl px-20 font-bold mb-2 md:mb-4 text-black">
      ‡§π‡§Æ‡§æ‡§∞‡•á <span className="text-orange-600">‡§∏‡§Ç‡§ó‡§†‡§®</span> ‡§Æ‡•á‡§Ç ‡§∂‡§æ‡§Æ‡§ø‡§≤ ‡§π‡•ã‡§Ç
    </h2>

    {step === 1 && (
      <form onSubmit={(e) => e.preventDefault()} className="max-w-3xl mx-auto space-y-4 p-6 text-2xl text-black border-orange-300 hover:border-orange-500">
        <div className="grid grid-cols-1 sm:grid-cols-2 gap-5">
          <div>
            <label className="block text-xl font-medium mb-2 text-black">‡§®‡§æ‡§Æ</label>
            <Input name="name" value={formData.name} onChange={handleChange} placeholder="‡§Ö‡§™‡§®‡§æ ‡§®‡§æ‡§Æ ‡§¶‡§∞‡•ç‡§ú ‡§ï‡§∞‡•á‡§Ç" className="text-black border-orange-300 hover:border-orange-500" />
          </div>
          <div>
            <label className="block text-xl font-medium mb-2 text-black">‡§ú‡§®‡•ç‡§Æ ‡§§‡§ø‡§•‡§ø</label>
            <Input type="date" name="dob" value={formData.dob} onChange={handleChange} className="text-black border-orange-300 hover:border-orange-500" />
          </div>
        </div>
        <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
          <div>
            <label className="block text-xl font-medium mb-2 text-black">‡§´‡§º‡•ã‡§®</label>
            <Input type="tel" name="phone" value={formData.phone} onChange={handleChange} placeholder="‡§Ö‡§™‡§®‡§æ ‡§´‡§º‡•ã‡§® ‡§®‡§Ç‡§¨‡§∞ ‡§¶‡§∞‡•ç‡§ú ‡§ï‡§∞‡•á‡§Ç" className="text-black border-orange-300 hover:border-orange-500" />
          </div>
          <div>
            <label className="block text-xl font-medium mb-2 text-black">‡§à‡§Æ‡•á‡§≤</label>
            <Input type="email" name="email" value={formData.email} onChange={handleChange} placeholder="‡§Ö‡§™‡§®‡§æ ‡§à‡§Æ‡•á‡§≤ ‡§¶‡§∞‡•ç‡§ú ‡§ï‡§∞‡•á‡§Ç" className="text-black border-orange-300 hover:border-orange-500" />
          </div>
        </div>
        <div>
          <label className="block text-xl font-medium mb-2 text-black">‡§™‡§§‡§æ</label>
          <Input name="address" value={formData.address} onChange={handleChange} placeholder="‡§Ö‡§™‡§®‡§æ ‡§™‡§§‡§æ ‡§¶‡§∞‡•ç‡§ú ‡§ï‡§∞‡•á‡§Ç" className="text-black border-orange-300 hover:border-orange-500" />
        </div>
        <div>
          <label className="block text-xl font-medium mb-2 text-black">‡§∏‡§Ç‡§¶‡•á‡§∂</label>
          <Textarea name="message" value={formData.message} onChange={handleChange} placeholder="‡§Ö‡§™‡§®‡§æ ‡§∏‡§Ç‡§¶‡•á‡§∂ ‡§Ø‡§π‡§æ‡§Å ‡§≤‡§ø‡§ñ‡•á‡§Ç" className="text-black border-orange-300 hover:border-orange-500" />
        </div>
        <Button type="button" className="w-full text-xl rounded-full bg-orange-200 hover:bg-orange-300 text-black mt-40 mb-4" onClick={handleNext}>
          ‡§Ö‡§ó‡§≤‡§æ
        </Button>

        {success && <p className="text-green-600 text-center">{success}</p>}
        {error && <p className="text-red-600 text-center">{error}</p>}

      </form>
    )}

    {step === 2 && (
      <form onSubmit={handleSubmit} className="max-w-3xl mx-auto space-y-4 p-6 text-2xl text-black">
        <div className="text-center">
          <p className="text-2xl font-bold mb-2 text-black">‡§≠‡•Å‡§ó‡§§‡§æ‡§® ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§∏‡•ç‡§ï‡•à‡§® ‡§ï‡§∞‡•á‡§Ç</p>
          <Image src="/images/payment-qr1.png" alt="‡§≠‡•Å‡§ó‡§§‡§æ‡§® QR ‡§ï‡•ã‡§°" width={300} height={300} className="mx-auto" />
        </div>
        <div>
          <label className="block text-xl font-semi-bold mb-3 text-black">‡§≠‡•Å‡§ó‡§§‡§æ‡§® ‡§∏‡•ç‡§ï‡•ç‡§∞‡•Ä‡§®‡§∂‡•â‡§ü ‡§Ö‡§™‡§≤‡•ã‡§° ‡§ï‡§∞‡•á‡§Ç</label>
          <Input type="file" accept="image/*" onChange={handleFileChange} className="text-black border-orange-200 hover:border-orange-400" />
          {fileName && <p className="text-sm mt-1 text-black">‡§ö‡§Ø‡§®‡§ø‡§§: {fileName}</p>}
        </div>
        <Button type="submit" className="w-full bg-orange-200 hover:bg-orange-300 text-black text-base" disabled={loading || !screenshot}>
          {loading ? "‡§∏‡§¨‡§Æ‡§ø‡§ü ‡§π‡•ã ‡§∞‡§π‡§æ ‡§π‡•à..." : "‡§∏‡§¨‡§Æ‡§ø‡§ü ‡§ï‡§∞‡•á‡§Ç"}
        </Button>
        <Button type="button" className="w-full bg-orange-200 hover:bg-orange-300 mt-2 text-black text-base" onClick={() => setStep(1)}>
          ‡§µ‡§æ‡§™‡§∏ ‡§ú‡§æ‡§è‡§Å
        </Button>
      </form>
    )}
  </div>
</section>



  );
}
